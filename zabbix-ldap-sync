#!/usr/bin/env python3
#
# Copyright (c) 2017-now Marc Sch√∂chlin <ms@256bit.org>
# Copyright (c) 2013-2014 Marin Atanasov Nikolov <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
The zabbix-ldap-sync script is used for syncing LDAP users with Zabbix.

"""
import sys
import os
from docopt import docopt

rundir = os.path.realpath(os.path.dirname(sys.argv[0]))
sys.path.append(rundir + "/lib/")

from zabbixldapconf import ZabbixLDAPConf
from zabbixconn import ZabbixConn
from ldapconn import LDAPConn


def main():
    usage = """
Usage: zabbix-ldap-sync [-lsrwdn] [--verbose] [--dryrun] -f <config>
       zabbix-ldap-sync -v
       zabbix-ldap-sync -h

Options:
  -h, --help                    Display this usage info
  -v, --version                 Display version and exit
  -l, --lowercase               Create AD user names as lowercase
  -s, --skip-disabled           Skip disabled AD users
  -r, --recursive               Resolves AD group members recursively (i.e. nested groups)
  -w, --wildcard-search         Search AD group with wildcard (e.g. R.*.Zabbix.*) - TESTED ONLY with Active Directory
  -d, --delete-orphans          Delete Zabbix users that don't exist in a LDAP group
  -n, --no-check-certificate    Don't check Zabbix server certificate
  --verbose                     Print debug message from ZabbixAPI
  --dryrun                      Just simulate zabbix interaction
  -f <config>, --file <config>  Configuration file to use

"""
    args = docopt(usage, version="0.1.1")

    config = ZabbixLDAPConf(args['--file'])
    config.load_config()

    lowercase = args['--lowercase']
    skipdisabled = args['--skip-disabled']
    deleteorphans = args['--delete-orphans']
    nocheckcertificate = args['--no-check-certificate']
    recursive = args['--recursive']
    verbose = args['--verbose']
    dryrun = args['--dryrun']

    if config.ldap_type == 'activedirectory':
        active_directory = "true"
        group_filter = config.ad_filtergroup
        user_filter = config.ad_filteruser
        disabled_filter = config.ad_filterdisabled
        memberof_filter = config.ad_filtermemberof
        group_member_attribute = config.ad_groupattribute
        uid_attribute = config.ad_userattribute
    else:
        active_directory = None
        openldap_type = config.openldap_type
        group_filter = config.openldap_filtergroup
        user_filter = config.openldap_filteruser
        group_member_attribute = config.openldap_groupattribute
        uid_attribute = config.openldap_userattribute

    wildcard_search = args['--wildcard-search']
    if wildcard_search:
        config.set_groups_with_wildcard()

    if nocheckcertificate:
        from requests.packages.urllib3 import disable_warnings
        disable_warnings()

    ldap_conn = LDAPConn(config.ldap_uri, config.ldap_base, config.ldap_user, config.ldap_pass,
                         group_member_attribute, group_filter, active_directory, uid_attribute, recursive,
                         memberof_filter, skipdisabled, lowercase, user_filter)

    zabbix_conn = ZabbixConn(config.zbx_server, config.zbx_username, config.zbx_password, config.zbx_auth,
                             ldap_conn, config, dryrun)

    if verbose:
        zabbix_conn.verbose()
    zabbix_conn.connect(nocheckcertificate)

    zabbix_conn.create_missing_groups(config.ldap_groups)

    #def sync_users(self, ldap_groups, ldap_media, user_opt, media_description, media_opt):

    zabbix_conn.sync_users(
                           config.user_opt,
                           config.media_description,
                           config.media_opt)

if __name__ == '__main__':
    main()
